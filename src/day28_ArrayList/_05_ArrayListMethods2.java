package day28_ArrayList;import java.util.ArrayList;import java.util.Arrays;public class _05_ArrayListMethods2 {    public static void main(String[] args) {        ArrayList<Integer> list = new ArrayList<>();        list.add(100);        list.add(200);        list.add(300);        list.add(400);        list.add(500);        System.out.println("------------------ remove(index number) Method --------------------- ");        // 	remove(int index): removes the element at the given index        int num = 1;        list.remove(num);        System.out.println(list);  // [100, 300, 400, 500]        System.out.println("------------------ remove(object) Method --------------------- ");        // remove(Object): removes the given object from ArrayList, returns boolean        Integer num1  = 200;   // This is an object not primitives.        boolean r1 =  list.remove(num1);        System.out.println(list); // [100, 300, 400, 500]        System.out.println(r1); // true        Integer num2 = 2000;        boolean r2 = list.remove(num2);        System.out.println(r2);  // false        System.out.println("------------------ clear() Method --------------------- ");        // 	clear(): remove all the elements of the ArrayList, size will be 0        System.out.println(list.size());  // 4        list.clear();        System.out.println(list.size());  // 0        System.out.println("---------------indexOf() and lastIndexOf() Method--------------------");        ArrayList<Character> characters = new ArrayList<>();        characters.add('A');        characters.add('A');        characters.add('A');        characters.add('A');        characters.add('A');        int a = characters.indexOf('A'); // 0        int b = characters.lastIndexOf('A'); // 4        System.out.println(a);  // 0        System.out.println(b);  // 4        System.out.println("---------------contains(Data) Method--------------------");        // 	contains(Data): returns true if the element is contained in the ArrayList, otherwise returns false        boolean r3 = characters.contains('A');  // true        boolean r4 = characters.contains('Z');   // false        System.out.println("---------------equals(ArrayList) Method--------------------");        // 	equals(ArrayList): returns true if two ArrayList are equal (same elements in the same order), otherwise returns false        ArrayList<Integer> list1 = new ArrayList<>();        list1.add(100);        list1.add(100);        list1.add(100);        ArrayList<Integer> list2 = new ArrayList<>();        list2.add(100);        list2.add(100);        list2.add(100);        System.out.println(list1 == list2);       // false   :because every new create new objects in the heap,                                                  // this == matches all arrayList equal or not , Not equal                                                  //because new creation mean is always different object        System.out.println(list1.equals(list2));  // true    : because matches every object in the array list        System.out.println("---------------isEmpty () Method--------------------");        boolean r5 = list1.isEmpty();  // false        list1.clear();  // clear all object in ArrayList        boolean r6 = list1.isEmpty();  // true    }}