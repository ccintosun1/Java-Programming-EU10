package utility;import java.util.ArrayList;import java.util.Arrays;public class ArraysUtility {    public static void main(String[] args) {        double[] a = {1.5, 1.5, 2.5, 2.5, 3.5};        double[] result = removeDuplicates(a);        System.out.println(Arrays.toString(result)); // [1.5, 2.5, 3.5]        double[] arr = {10.5, 10.5, 20, 30.5, 40, 30.5, 30.5, 30.5};        arr= replaceAll(arr,30.5,310.7);        System.out.println(Arrays.toString(arr));   // [10.5, 10.5, 20.0, 310.7, 40.0, 310.7, 310.7, 310.7]    }    // print each integer of an integer array in separate lines    public static void printEach(int[] array) {        for (int each : array) {            System.out.println(each);        }    }    // print each decimal number of double array in separate lines    public static void printEach(double[] array) {        for (double each : array) {            System.out.println(each);        }    }    // print each String of String array in separate lines    public static void printEach(String[] array) {        for (String each : array) {            System.out.println(each);        }    }    // print each char of char array in separate lines    public static void printEach(char[] array) {        for (char each : array) {            System.out.println(each);        }    }    // print the maximum number for integer array    public static int max(int[] numbers) {        Arrays.sort(numbers);        return numbers[numbers.length - 1];    }    // print the maximum number for double array    public static double max(double[] numbers) {        Arrays.sort(numbers);        return numbers[numbers.length - 1];    }    // print the minimum number for integer array    public static int min(int[] numbers) {        Arrays.sort(numbers);        return numbers[0];    }    // print the minimum number for double array    public static double min(double[] numbers) {        Arrays.sort(numbers);        return numbers[0];    }    // check if the integer is contained in the given integer. returns boolean    public static boolean contain(int[] array, int element) {        boolean result = false;        for (int each : array) {            if (each == element) { // if the arrays contain element                result = true;            }        }        return result;    }    public static boolean contain(char[] array, char element) {        boolean result = false;        for (char each : array) {            if (each == element) {  // if the arrays contain element                result = true;            }        }        return result;    }    //------------------ Add Element to Array ----------------------//    //1 i cozmek icin neye ihtiyac var 1 array ve 1 integer a    public static int[] addElement(int[] array, int element) {        int[] result = new int[array.length + 1];        int i = 0;        for (int each : array) {            result[i++] = each;        }        result[i] = element;        return result;    }    // 2. create a return method called addDouble that can add a double after the last index of a double array    public static double[] addElement(double[] array, double element) {        double[] result = new double[array.length + 1];        int i = 0;        for (double each : array) {            result[i++] = each;        }        result[i] = element;        return result;    }    //3. create a return method called addString that can add a String after the last index of a String array    public static String[] addElement(String[] array, String element) {        String[] result = new String[array.length + 1];        int i = 0;        for (String each : array) {            result[i++] = each;        }        result[i] = element;        return result;    }    // 4. create a return method called addChar that can add a char after last index of a char array    public static char[] addElement(char[] array, char element) {        char[] result = new char[array.length + 1];        int i = 0;        for (char each : array) {            result[i++] = each;        }        result[i] = element;        // result [result.length-1] = element;  ==> element need to be assigned to the last index        return result;    }    //------------------ contains element in the array ( true/ false ) ----------------------//    //checks if the given integer is contained in the given array. returns boolean.  contains(int[], int)    public static boolean contains(int[] array, int element){        boolean result = false;        for (int each : array) {            if(each == element){ // if any array's element is matching with the given element, it means the given elements is contained in the array                result = true;            }        }        return result;    }    //checks if the given double is contained in the given array. returns boolean.    public static boolean contains(double[] array, double element){        boolean result = false;        for (double each : array) {            if(each == element){                result = true;            }        }        return result;    }    //checks if the given char is contained in the given array. returns boolean.    public static boolean contains(char[] array, char element){        boolean result = false;        for (char each : array) {            if(each == element){                result = true;            }        }        return result;    }    //checks if the given String is contained in the given array. returns boolean.    public static boolean contains(String[] array, String element){        boolean result = false;        for (String each : array) {            if( each.equals(element) ){                result = true;            }        }        return result;    }    //------------------ merge 2 arrays returns new array  ----------------------//    public static int[] merge2Array(int[] arr1, int[] arr2) {  // 1. yontem ile cozum interwiev        int[] result = new int[arr1.length + arr2.length];        int i = 0;        for (int each : arr1) {            result[i++] = each;        }        for (int each : arr2) {            result[i++] = each;        }        return result;    }    public static double[] merge2Array(double[] arr1, double[] arr2) {  // 2. yontem ile cozum (method icinde method kullanarak)        double[] result = {};        for (double each : arr1) {            ArraysUtility.addElement(result, each);        }        for (double each : arr2) {            ArraysUtility.addElement(result, each);        }        return result;    }    public static char[] merge2Array(char[] arr1, char[] arr2) {  // 2. yontem ile cozum (method icinde method kullanarak)        char[] result = {};        for (char each : arr1) {            result = ArraysUtility.addElement(result, each);        }        for (char each : arr2) {            result = ArraysUtility.addElement(result, each);        }        return result;    }    public static String[] merge2Array(String[] arr1, String[] arr2) {  // 2. yontem ile cozum (method icinde method kullanarak)        String[] result = {};        for (String each : arr1) {            result = ArraysUtility.addElement(result, each);        }        for (String each : arr2) {            result = ArraysUtility.addElement(result, each);        }        return result;    }    //------------------ frequency of  element in array ----------------------//    public static int frequencyOfElement(int[] array, int element) {        int count = 0;        for (int each : array) {            if (each == element) {                count++;            }        }        return count;    }    public static int frequencyOfElement(double[] array, double element) {        int count = 0;        for (double each : array) {            if (each == element) {                count++;            }        }        return count;    }    public static int frequencyOfElement(char[] array, char element) {        int count = 0;        for (char each : array) {            if (each == element) {                count++;            }        }        return count;    }    public static int frequencyOfElement(String[] array, String element) {        int count = 0;        for (String each : array) {            if (each.equals(element)) {                count++;            }        }        return count;    }    //------------------ find Unique elements in the array ----------------------//    public static int[] uniqueElements(int[] array) {        int[] result = {};    // new int [0] it is temporary        for (int each : array) {            if (ArraysUtility.frequencyOfElement(array, each) == 1) {   //if freq is 1 , means the element is unique                result = ArraysUtility.addElement(result, each);            }        }        return result;   // result is new array    }    public static double[] uniqueElements(double[] array) {        double[] result = {};    // new int [0] it is temporary        for (double each : array) {            if (ArraysUtility.frequencyOfElement(array, each) == 1) {   //if freq is 1 , means the element is unique                result = ArraysUtility.addElement(result, each);   // new array created and every add element            }        }        return result;   // result is new array    }    public static char[] uniqueElements(char[] array) {        char[] result = {};    // new int [0] it is temporary        for (char each : array) {            if (ArraysUtility.frequencyOfElement(array, each) == 1) {   //if freq is 1 , means the element is unique                result = ArraysUtility.addElement(result, each);   // new array created and every add element            }        }        return result;   // result is new array    }    public static String[] uniqueElements(String[] array) {        String[] result = {};    // new int [0] it is temporary        for (String each : array) {            if (ArraysUtility.frequencyOfElement(array, each) == 1) {   //if freq is 1 , means the element is unique                result = ArraysUtility.addElement(result, each);   // new array created and every add element            }        }        return result;   // result is new array    }    //------------------ Remove Element from Array ----------------------//    //                                   {1,2,3,4} ,      2    public static int[] removeElements(int[] array, int index) {        if (index < 0 || index > array.length - 1) {            System.err.println("Invalid Index: " + index);            System.exit(0);        }        int[] result = new int[array.length - 1];        int j = 0;        for (int each : array) {            if (each == array[index]) {                continue;            }            result[j++] = each;        }        return result;    }    public static double[] removeElements(double[] array, int index) {        if (index < 0 || index > array.length - 1) {            System.err.println("Invalid Index: " + index);            System.exit(0);        }        double[] result = new double[array.length - 1];        int j = 0;        for (int i = 0; i < array.length; i++) {            if (i == index) {                continue;            }            result[j++] = array[i];        }        return result;    }    public static char[] removeElements(char[] array, int index) {        if (index < 0 || index > array.length - 1) {            System.err.println("Invalid Index: " + index);            System.exit(0);        }        char[] result = new char[array.length - 1];        int j = 0;        for (char each : array) {            if (each == array[index]) {                continue;            }            result[j++] = each;        }        return result;    }    public static String[] removeElements(String[] array, int index) {        if (index < 0 || index > array.length - 1) {            System.err.println("Invalid Index: " + index);            System.exit(0);        }        String[] result = new String[array.length - 1];        int j = 0;        for (String each : array) {            if (each.equals(array[index])) {                continue;            }            result[j++] = each;        }        return result;    }    //------------------ Reverse  Array ----------------------//    public static int[] reverse(int[] array) {        int[] result = new int[array.length];        int j = 0;        for (int i = array.length - 1; i >= 0; i--) {            result[j++] = array[i];        }        return result;    }    public static double[] reverse(double[] array) {        double[] result = new double[array.length];        int j = 0;        for (int i = array.length - 1; i >= 0; i--) {            result[j++] = array[i];        }        return result;    }    public static char[] reverse(char[] array) {        char[] result = new char[array.length];        int j = 0;        for (int i = array.length - 1; i >= 0; i--) {            result[j++] = array[i];        }        return result;    }    public static String[] reverse(String[] array) {        String[] result = new String[array.length];        int j = 0;        for (int i = array.length - 1; i >= 0; i--) {            result[j++] = array[i];        }        return result;    }    //------------------ RemoveDuplicates ----------------------//    public static int[] removeDuplicates(int[] array) {        int[] result = {};        for (int i = 0; i < array.length; i++) {            int count = 0;            for (int j = i + 1; j < array.length; j++) {                if (array[i] == array[j]) {                    count++;                }            }            if (count == 0) {                result = ArraysUtility.addElement(result, array[i]);            }        }        return result;    }    public static double[] removeDuplicates(double[] array) {        double[] result = {};        for (int i = 0; i < array.length; i++) {            int count = 0;            for (int j = i + 1; j < array.length; j++) {                if (array[i] == array[j]) {                    count++;                }            }            if (count == 0) {                result = ArraysUtility.addElement(result, array[i]);            }        }        return result;    }    public static char[] removeDuplicates(char[] array) {        char[] result = {};        for (int i = 0; i < array.length; i++) {            int count = 0;            for (int j = i + 1; j < array.length; j++) {                if (array[i] == array[j]) {                    count++;                }            }            if (count == 0) {                result = ArraysUtility.addElement(result, array[i]);            }        }        return result;    }    public static String[] removeDuplicates(String[] array) {        String[] result = {};        for (int i = 0; i < array.length; i++) {            int count = 0;            for (int j = i + 1; j < array.length; j++) {                if (array[i].equals(array[j])) {                    count++;                }            }            if (count == 0) {                result = ArraysUtility.addElement(result, array[i]);            }        }        return result;    }    //------------------ RemoveDuplicates2 1 le ayni ama icerik farkli  ----------------------//    public static int[] removeDuplicates2 (int[] array){        int[] result = {};        for (int each : array) {            if (!ArraysUtility.contain(result,each)){                ArraysUtility.addElement(result,each);            }        }        return result;    }    public static double[] removeDuplicates2 (double[] array){        double[] result = {};        for (double each : array) {            if (!ArraysUtility.contains(result,each)){                ArraysUtility.addElement(result,each);            }        }        return result;    }    public static char[] removeDuplicates2 (char[] array){        char[] result = {};        for (char each : array) {            if (!ArraysUtility.contains(result,each)){                ArraysUtility.addElement(result,each);            }        }        return result;    }    public static String[] removeDuplicates2 (String[] array){        String[] result = {};        for (String each : array) {            if (!ArraysUtility.contains(result,each)){                ArraysUtility.addElement(result,each);            }        }        return result;    }    //------------------ Replace Element Method ----------------------//    public static int[] replace(int[] array, int index, int newElement){        if (index<0 || index>array.length-1){            System.err.println("Invalid index : " + index);            System.exit(0);        }        array[index] = newElement;        return array;    }    public static double[] replace(double[] array, int index, double newElement){        if (index<0 || index>array.length-1){            System.err.println("Invalid index : " + index);            System.exit(0);        }        array[index] = newElement;        return array;    }    public static char[] replace(char[] array, int index, char newElement){        if (index<0 || index>array.length-1){            System.err.println("Invalid index : " + index);            System.exit(0);        }        array[index] = newElement;        return array;    }    public static String[] replace(String[] array, int index, String newElement){        if (index<0 || index>array.length-1){            System.err.println("Invalid index : " + index);            System.exit(0);        }        array[index] = newElement;        return array;    }    //------------------ ReplaceAll  Method ----------------------//    // replaces all the matching old values of the array with the new value    public static int[] replaceAll(int[] array, int oldValue, int newValue) {        int i = 0;        for (int each : array) {      // for loop ile de yaparsin double da yapicam            if (each == oldValue) {                each = newValue;            }            array[i++] = each;        }        return array;    }    public static double[] replaceAll(double[] array, double oldValue, double newValue) {        for (int i = 0; i < array.length; i++) {            if (array[i] == oldValue){                array[i]=newValue;            }        }        return array;    }    public static char[] replaceAll(char[] array, char oldValue, char newValue) {        for (int i = 0; i < array.length; i++) {            if (array[i] == oldValue){                array[i]=newValue;            }        }        return array;    }    public static String[] replaceAll(String[] array, String oldValue, String newValue) {        for (int i = 0; i < array.length; i++) {            if (array[i].equals(oldValue)){                array[i]=newValue;            }        }        return array;    }}