package day27_WrapperClasses;public class _00_LessonNotes {    /*    Java Day27Topic: Wrapper Classespackage: day27_WrapperClasseswarmup tasks:	1. Replace Task:		1.1 Create a method named replace that passes three parameters: integer array, integer index, integer newElement. The method replaces the element of the array at given index with the new element, and returns the new array.				Ex:					arr = {1,2,3,4,5};					replace(arr, 2, 30) ===> {1, 2, 30, 4, 5}		1.2 Create the same functions for double arrays, char arrays, and String arrays	2. RecplaceAll Task:		2.1 Create a method named replaceAll that passes three parameters: integer array, integer oldElement, integer newElement. The method replaces all the element of the array that matching with the given old element with the given new element, and returns the new array.			Ex:				arr = {10, 10, 20, 30, 40, 30, 30, 30};				replaceAll(arr, 30, 300) ==> {10, 10, 20, 300, 40, 300, 300, 300}		2.2 Create the same functions for double arrays, char arrays, and String arraysData Structures:	1. Array: supports primitives & non primitives	2. Collection: ONLY support non-primitives	3. Map: ONLY support non-primitivesWrapper classes:		1. parse methods: converts String to primitive		2. valueOf methods: converts String to wrapper classPasswordValidation:    Write a program that can verify if a password is a strong password. Characteristics of strong passwords are:                1. Password MUST be at least have 8 characters long, and should not contain space                2. PassWord should at least contain one upper case letter                3. PassWord should at least contain one lower case letter                4. Password should at least contain one special characters                5. Password should at least contain a digitTomorrow:	ArrayList++------------------- Wrapper Class --------------------------++Non primitive datay tpes has many methods. But primitive data types hasnâ€™t ready methods. They includes only value.Wrapper class lar primitive ile ayni degerleri barindirirken degerlerin yaninda hazir methodlar da kullanmamiza imkan veren calass lardir.1. Insert Task:		1.1 Create a method named insert that passes three parameters: integer array, integer index, and integer element. the method inserts the given element into the given index of the array and returns the new array				Ex:					arr = {10, 20, 30, 40, 50};					insert(arr, 2, 100) ==> {10, 20, 100, 30, 40, 50}		1.2 Create the same function for double array, char array, and string array2. Swap Task:	2.1 Create a method named swap that passes three parameters: integer array, integer i, and integer j. the method swaps the element at index i with the element at index j, and returns the new array			Ex:				arr = {10, 20, 30, 40, 50};				swap(arr, 2, 4) ==>  {10, 20, 50, 40, 30}	2.2 Create the same function for double array, char array, and string array3. Write a program that can retrieve the letters, digits, and special characters from the string		Ex:			str = "Wooden Spoon!"		output:			letters= "WoodenSpoon";			Digits = "";			specialChars = " !";4. Write a program that returns true if the total number of uppercase characters is equal to the total number of Lowercase characters of a string		Ex:			str = "JAVA java";		output:			true     */}