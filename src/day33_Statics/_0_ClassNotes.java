package day33_Statics;public class _0_ClassNotes {    /*    Java Day33Topic:  1. Creating Multiple class in a file		2. Statics			- Variables			- Methods			- static importPackage name: day33_StaticsWarmup tasks:	Student Task:		1. Create a class called Student:				Attributes:					name, gender, age, studentID, grade				Add a constructor that allows user to create object by setting the name of				student				Add a constructor that allows user to create object by setting the name and gender of the student				Add a constructor that allows user to create object by setting the name and studentID of the student				Add a constructor that allows user to create object by setting the name, studentID and grade of the student				Add a constructor that allows user to create object by setting the name, gender and age of the student				Add a constructor that allows user to create object by setting the name, gende, age and studentID of the student				Add a constructor that allows user to create object by setting the name, gende, age, studentID and grade of the student				Actions:					toString()					study()instance: belong to the object		each object has its own copy of the instances (can have multiple copies)static: belongs to the class.		There is only one copy os statics thta's shared by all objects of the class     */    /*    ---------------------------------------------------------------------------------    1. CydeoStudent Task		1. Create a class named CydeoStudent:				Attributes:					instances: name, age, gender, id, grade, batchNumber, groupNumber					statics: schoolName, programmingLanguage				Add a constructor that can set All the fields (instances)				Actions:					study()					attendClass()					printSchoolName(): displays the school name					printProgLanguage(): displays the name of programming language					toString()2. Circle Task:		1. Create a class named Circle:				Attributes:					instance: radius, diameter					static: pi				Add a constructor that can set All the fields (instances)					HINT: we only need to know the radius to set the radius & diameter				Actions:					calcArea(): returns the area of Circle					calcPerimeter(): returns the perimeter of Circle					printPi(): displays PI value					toString(): displays the radius, diameter, pi, area and perimeter of the circle when the object of circle is passed in the print statement3. Person Task:		1. Create a class named Person:				Attributes:					instance: name, age, gender					static: isHuman(boolean), hasNose(boolean), hasWings (boolean), numberOfHead, numberOfEyes,				Add a constructor that can set All the fields (instances)				Actions:					eat(String food)					drink(String drink)					sleep()					toString()4. IPhone Task:		1. Creta a class named IPhone:				Attributes:					instance: model, price, color, size					statics: brand, OS, madeIn				Add a constructor that can set All the fields (instances)				Actions:					faceTime(long phoneNumber)					faceTime(String email)					call(long phoneNumber)					text(long phoneNumber)					toString()5. Address Task:		1. Create a class named Address:		    Attributes:		        instance:  street, city, state, zipCode;		        static: country, planet	        Add a constructor that can set All the fields (instances)		    Actions		            setInfo: sets all the instances		            toString: returns the address		                        EX:		                            7925 Jones Branch Dr		                            McLean Va, 220126. Dog Task:		1. Create a class called Dog	            Attributes:	            	instance: breed, size, gender, age, color	            	statics: numberOfLegs, numberOfEyes, numberOfWings, isFriendly	            Add a constructor to initialized all the fields (instances)	            Methods:	            	eat()	            	sleep()	            	play()	                toString()7. Car Task:		1. Create a class called Car            Attributes:                 instance: make, model, color, year, price                 static: numberOfWheels, hasBattery, hasSeats            Add a constructor to initialize all the fields           Methods:                drive()                toString()     */}