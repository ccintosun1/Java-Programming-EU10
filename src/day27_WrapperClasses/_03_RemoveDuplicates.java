package day27_WrapperClasses;import utility.ArraysUtility;import java.util.Arrays;public class _03_RemoveDuplicates {    public static void main(String[] args) {        int[] arr = {1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4};        arr = removeDuplicates2(arr);        System.out.println(Arrays.toString(arr));  // [1, 2, 3, 4]        String[] words = {"Java", "Java", "Python", "C#", "Java", "Java"};        words = removeDuplicates2(words);        System.out.println(Arrays.toString(words)); // [Java, Python, C#]        //----------------- Extra information for remove duplicate -----------  Hazir method for duplicate        int[] numbers = {1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4};        numbers = Arrays.stream(numbers).distinct().toArray();        System.out.println(Arrays.toString(numbers));  // [1, 2, 3, 4]        // ------------------------------------------------------------------------------------------    }    public static int[] removeDuplicates(int[] array) {        int[] result = {};        for (int i = 0; i < array.length; i++) {            int count = 0;            for (int j = i + 1; j < array.length; j++) {                if (array[i] == array[j]) {                    count++;                }            }            if (count == 0) {                result = ArraysUtility.addElement(result, array[i]);            }        }        return result;    }    public static double[] removeDuplicates(double[] array) {        double[] result = {};        for (int i = 0; i < array.length; i++) {            int count = 0;            for (int j = i + 1; j < array.length; j++) {                if (array[i] == array[j]) {                    count++;                }            }            if (count == 0) {                result = ArraysUtility.addElement(result, array[i]);            }        }        return result;    }    public static char[] removeDuplicates(char[] array) {        char[] result = {};        for (int i = 0; i < array.length; i++) {            int count = 0;            for (int j = i + 1; j < array.length; j++) {                if (array[i] == array[j]) {                    count++;                }            }            if (count == 0) {                result = ArraysUtility.addElement(result, array[i]);            }        }        return result;    }    public static String[] removeDuplicates(String[] array) {        String[] result = {};        for (int i = 0; i < array.length; i++) {            int count = 0;            for (int j = i + 1; j < array.length; j++) {                if (array[i].equals(array[j])) {                    count++;                }            }            if (count == 0) {                result = ArraysUtility.addElement(result, array[i]);            }        }        return result;    }    //----------------2. yontem Muhtarin Dersinden---------------------    public static int[] removeDuplicates2(int[] array) {        int[] result = {};        for (int each : array) {            if (!ArraysUtility.contain(result, each)) {                result = ArraysUtility.addElement(result, each);            }        }        return result;    }    public static double[] removeDuplicates2(double[] array) {        double[] result = {};        for (double each : array) {            if (!ArraysUtility.contains(result, each)) {                result = ArraysUtility.addElement(result, each);            }        }        return result;    }    public static char[] removeDuplicates2(char[] array) {        char[] result = {};        for (char each : array) {            if (!ArraysUtility.contains(result, each)) {               result =  ArraysUtility.addElement(result, each);            }        }        return result;    }    public static String[] removeDuplicates2(String[] array) {        String[] result = {};        for (String each : array) {            if (!ArraysUtility.contains(result, each)) {                result = ArraysUtility.addElement(result, each);            }        }        return result;    }}